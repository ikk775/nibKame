(let null
  (fun (x)
    (= x nil)))

(letrec rev-append
  (fun (xs ys)
	(if (null xs)
	  ys
	  (rev-append (cdr xs) (cons (car xs) ys)))))

(let rev
  (fun (xs)
	 (rev-append xs nil)))

(letrec map
  (fun (f xs)
	(if (null xs)
	  nil
	  (cons (f (car xs))
			(map f (cdr xs))))))

(letrec length-sub
  (fun (i xs)
    (if (null xs)
       i
       (length-sub (+ i 1) (cdr xs)))))

(let length
  (fun (xs)
	  (length-sub 0 xs)))

(letrec f
  (fun (array i xs)
    (if (null xs)
        unit
        (let any (array-set array i (car xs))
             (f array (+ i 1) (cdr xs))))))

(let array-from-list-with-length
  (fun (len xs)
        (f (array-alloc len) 0 xs)))

