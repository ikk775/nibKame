(let null
  (fun (x)
    (= x nil)))

(letrec rev_append
  (fun (xs ys)
	(if (null xs)
	  ys
	  (rev_append (cdr xs) (cons (car xs) ys)))))

(let rev
  (fun (xs)
	 (rev_append xs nil)))

(letrec map
  (fun (f xs)
	(if (null xs)
	  nil
	  (cons (f (car xs))
			(map f (cdr xs))))))

(let length
  (fun (xs)
  	(letrec length_sub
	  (fun (i xs)
	    (if (null xs)
		  i
		  (length_sub (+ i 1) (cdr xs))))
	  (length_sub 0 xs))))

