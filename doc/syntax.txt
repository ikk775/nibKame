. 構文
.. 二種類の構文木
  - ソースをパーズする先の構文木
    ユーザプログラムのマクロはここで作用する。
    仮に繁木と呼ぶことにする。
    パーザはこの形のいずれかにパーズすべき。
  - 型推論に渡される構文木
    仮に正規化木と呼ぶことにする。
    型推論器はこの形の木が渡されると期待すべき。
.. 構文木(のS式表現)
... リテラルなど
.... unit
  - unit
    繁木:
      unit
    正規化木:
      unit
.... リスト
  - [ <a> ; ... ]
    繁木:
      (<a> ...)
    正規化木:
      (list <a> ...)
.... タプル
  - <a> , ...
    繁木:
      (tuple <a> ...)
    正規化木:
      (tuple <a> ...)
.... 配列
  - [| <atom> ; ... |]
    繁木:
      (array <a> ...)
    正規化木:
      (array <a> ...)
.... 数値
  - Int
    1 とか 2 とか -2 とか
  - Char
    #\a
    のように #\ へ続けて一文字を置く. 複数の文字を並べるとLisp風にエスケープシーケンスとして解釈しようとする.

... 型
.... バリアント
  - type <typeconstr-name> = <constructor1> | <constructor2> of <typexpr> * <typexpr>
    繁木:
    正規化木:
      (type <type-name> ()
       (<constructor1>)
       (<constructor2> (tuple <typexpr> <typexpr>)))
  - type <type-varible1>, <type-varible2> ... <typeconstr-name> = <constructor1> | <constructor2> of <typexpr> * <typexpr>
    繁木:
    正規化木:
      (type <type-name> (<type-varible1> <type-varible2>)
       (<constructor1>)
       (<constructor2> (tuple <typexpr> <typexpr>)))
.... 型制約
  - <expr> : <typeexpr>
    正規化木:
      (type-constraint <expr> <typeexpr>)

... 副作用
.... 配列
.... 参照型
  - ref <expr>
    繁木:
      (ref <expr>)
    正規化木:
      なし
#     (array <expr>) となる
.... 参照
  - <expr1>.(<expr2>)
    繁木:
      (. <expr1> <expr2>)
    正規化木:
      配列に対して
      (array-ref <expr1> <expr2>)
  - !<expr>
    繁木:
      (! <expr>)
    正規化木:
    なし
#     (array-ref <expr> 0) となる
.... 代入
  - <expr1>.(<expr2>) <- <expr3>
    繁木:
      (<-  <expr>)
    正規化木:
      配列に対して
      (array-set <expr1> <expr2> <expr3>)

... 演算子
.... 算術演算
  - <a> + <b>
    繁木:
      (+ <a> <b> ...)
    正規化木:
      (+ <a> <b>)
  その他も同様
.... 連結
  - <a> :: <b>
    繁木:
      (:: <a> <b>)
    正規化木:
      (cons <a> <b>)
.... 式の並び
  - <e1> ; <e2>
    繁木:
      (; <e1> <e2> ...)
    正規化木:
      (; <e1> <e2>)

... 構文
.... let式
  - let <id> = <e1> in <e2>
    繁木:
    正規化木:
      (let <id> <e1> <e2>)
  - let rec <id> = <e1> in <e2>
    繁木:
    正規化木:
      (letrec <id> <e1> <e2>)
.... if式
  - if <e1> then <e2> else <e3>
    繁木:
    正規化木:
      (if <e1> <e2> <e3>)
.... match式
  - match <e1> with | <pattern> -> <expr> ...
    繁木:
      (match <e1> (<pattern> <expr>) ...)
    正規化木:
      (match <e1> (<pattern> <expr>) ...)
  - match <e1> with | <pattern> when <guard> -> <expr> ...
    繁木:
      (match <e1> (<pattern> <guard> <expr>) ...)
    正規化木:
      (match <e1> (<pattern> <guard> <expr>) ...)
..... パターン式
  - リテラル
    そのまま
  - 変数
    そのまま
  - 複数のパターンの全てにマッチ
    (and <pattern> ...)
  - 複数のパターンのどれかにマッチ
    (or <pattern> ...)
  - マッチしない
    (not <pattern>)
  - <constructor> <pattern> : データコンストラクタ
    (<constructor> <pattern>)
  - <varible>, ... : タプル
   (tuple <varible> ...)
  - [<varible> ...] : 配列
   (array <varible> ...)
.... fun式
  - fun <id> -> <expr>
    繁木:
      (fun (<id>) <expr>)
    正規化木:
      (fun (<id>) <expr>)
  - fun <id> ... -> <expr>
    繁木:
      (fun (<id> ...) <expr>)
    正規化木:
      なし
.... 関数呼び
  - <fun> <arg> ...
    繁木:
      (apply <fun> <arg> ...)
    正規化木:
      (apply <fun> <arg> ...)

# vim: set ft=howm-memo ts=8 noexpandtab sts=2 sw=2 :
